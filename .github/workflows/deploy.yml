name: Deploy HTML App with Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    name: Deploy with Terraform and Ansible
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      # Terraform Plan and Apply
      - name: Terraform Plan and Apply
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
        working-directory: terraform

      # Retrieve VM Public IP
      - name: Retrieve VM Public IP
        id: terraform_output
        run: |
          PUBLIC_IP=$(az network public-ip show \
            --resource-group tf-linux-rg \
            --name tf-linux-vm-public-ip \
            --query ipAddress -o tsv)
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_ENV
        working-directory: terraform

      # Decode the private key and save it to a file
      - name: Decode and save SSH private key
        run: |
          echo "${{ secrets.AZURE_PRIVATE_KEY }}" | base64 -d > private_key.pem
          chmod 600 private_key.pem

      # Test SSH Connection
      - name: Test SSH Connection
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no azureuser@${{ env.public_ip }} echo "SSH connection successful"
        shell: bash

      # Install Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          pip install --upgrade ansible

      # Configure Ansible Inventory
      - name: Configure Ansible Inventory
        run: |
          echo "[azure_vm]" > inventory
          echo "${{ env.public_ip }} ansible_user=azureuser ansible_ssh_private_key_file=private_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory
          
      # Run Ansible Playbook
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory setup.yml -vvv
