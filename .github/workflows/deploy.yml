# .github/workflows/deploy.yml

name: Deploy HTML App with Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    name: Deploy with Terraform and Ansible
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # # Set up Terraform
      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.3.0

      # # Initialize Terraform
      # - name: Initialize Terraform
      #   run: terraform init
      #   working-directory: terraform
      # # Import existing resources if not in the state
      # - name: Import Resource Group if not managed
      #   run: |
      #     terraform state show azurerm_resource_group.rg || \
      #     terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg
      #   working-directory: terraform

      # - name: Import Virtual Network if not managed
      #   run: |
      #     terraform state show azurerm_virtual_network.vnet || \
      #     terraform import azurerm_virtual_network.vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vm-vnet
      #   working-directory: terraform

      # - name: Import Subnet if not managed
      #   run: |
      #     terraform state show azurerm_subnet.subnet || \
      #     terraform import azurerm_subnet.subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vm-vnet/subnets/tf-linux-vm-subnet
      #   working-directory: terraform

      # - name: Import Public IP if not managed
      #   run: |
      #     terraform state show azurerm_public_ip.public_ip || \
      #     terraform import azurerm_public_ip.public_ip /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/publicIPAddresses/tf-linux-vm-public-ip
      #   working-directory: terraform

      # - name: Import Network Interface if not managed
      #   run: |
      #     terraform state show azurerm_network_interface.nic || \
      #     terraform import azurerm_network_interface.nic /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/networkInterfaces/tf-linux-vm-nic
      #   working-directory: terraform

      # - name: Import Virtual Machine if not managed
      #   run: |
      #     terraform state show azurerm_linux_virtual_machine.linux_vm || \
      #     terraform import azurerm_linux_virtual_machine.linux_vm /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Compute/virtualMachines/tf-linux-vm
      #   working-directory: terraform
      # - name: Import NSG if not managed
      #   run: |
      #     terraform state show azurerm_network_security_group.nsg || \
      #     terraform import azurerm_network_security_group.nsg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/networkSecurityGroups/Network-NSG
      #   working-directory: terraform
      # # Import existing Network Security Group Association if not managed
      # - name: Import Subnet NSG Association if not managed
      #   run: |
      #     terraform state show azurerm_subnet_network_security_group_association.nsg_association || \
      #     terraform import azurerm_subnet_network_security_group_association.nsg_association /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vm-vnet/subnets/tf-linux-vm-subnet
      #   working-directory: terraform
    
      # # Terraform Plan
      # - name: Terraform Plan
      #   run: terraform plan -out=tfplan
      #   working-directory: terraform

      # # Terraform Apply
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   run: terraform apply -auto-approve tfplan
      #   working-directory: terraform

      # # Retrieve Terraform Outputs
      # - name: Retrieve Terraform Outputs
      #   id: terraform_output
      #   run: |
      #     PUBLIC_IP=$(az network public-ip show \
      #       --resource-group tf-linux-rg \
      #       --name tf-linux-vm-public-ip \
      #       --query ipAddress -o tsv)
      #     echo "public_ip=${PUBLIC_IP}" >> $GITHUB_ENV  
      #   working-directory: terraform

      # Decode the private key and save it to a file
      # - name: Decode and save SSH private key
      #   run: |
      #     echo "${{ secrets.AZURE_PRIVATE_KEY }}" >> private_key.pem
      #     chmod 600 private_key.pem

      # # Test SSH Connection (Add verbosity for troubleshooting)
      - name: Test SSH Connection
        run: |
          chmod 600 newprivatekeypair.pem
          echo "Testing SSH connection to VM..."
          pwd
          ls -l 
          ssh -i newprivatekeypair.pem -o StrictHostKeyChecking=no -vvv azureuser@40.85.153.118 echo "SSH connection successful"
        shell: bash

      # Install Ansible
      - name: Install Ansible
        run: |
          sudo apt-get install -y ansible
          sudo python3 -m pip install --upgrade ansible
          pip show ansible
          sudo apt-get update
          sudo apt-get install zlib1g

      # Configure Ansible Inventory
      # - name: Configure Ansible Inventory
      #   run: |
      #     echo "Configuring Ansible inventory file..."
      #     echo "[azure_vm]" > inventory
      #     echo "40.85.153.118 ansible_user=azureuser ansible_ssh_private_key_file=private_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory
          
      #     if [[ ! -f "inventory" ]]; then
      #       echo "Error: Ansible inventory file was not created."
      #       exit 1
      #     fi

      #     echo "Ansible inventory file configured."

      # Run Ansible Playbook
      - name: Run Ansible Playbook
        run: |
          chmod 600 newprivatekeypair.pem
          python3 --version
          echo "Running Ansible playbook..."
          ansible-playbook -i inventory.ini setup.yml -u azureuser@40.85.153.118 --private-key=newprivatekeypair.pem --limit all -vvv
      # ansible all -m command -a "echo hello" -i inventory.ini -vvv
      # - name: Ensure Python 3 is Installed on VM
      # #   uses: docker://cytopia/ansible:latest
      # #   with:
      # #     args: >
      # #         ansible-playbook -i inventory -c paramiko -e "ansible_user=azureuser"
      # #         -e "ansible_password=${{ secrets.AZURE_VM_PASSWORD }}" 
      # #         -e "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
      # #         -e "ansible_python_interpreter=/usr/bin/python3"
      # #         - <<'EOF'
      # #         ---
      # #         - name: Ensure Python 3 is installed
      # #           hosts: azure_vm
      # #           gather_facts: false
      # #           tasks:
      # #             - name: Install Python 3 on the VM using raw command
      # #               raw: |
      # #                 sudo apt-get update -y
      # #                 sudo apt-get install -y python3 python3-apt
      # #         EOF
    
      # - name: Run Ansible Playbook for Deployment
      #   uses: docker://cytopia/ansible:latest
      #   with:
      #     args: |
      #       /bin/sh -c "
      #       apk update &&
      #       apk add --no-cache sshpass &&
      #       ansible-playbook -i inventory ansible-playbook.yml
      #       "


